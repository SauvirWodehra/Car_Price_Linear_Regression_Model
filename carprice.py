# -*- coding: utf-8 -*-
"""carprice.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LH7RNmwN_HZEbZxyd34MWtrGhZaXL-jR
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df=pd.read_csv('ford.csv')

df

df.shape

df.head()

df.info()

df.describe()

df.isna().sum()

df.isnull().sum()

import seaborn as sns

sns.histplot(df['price'],bins=50,kde=True)

sns.heatmap(df.corr(numeric_only=True),annot=True)

sns.boxplot(x='year',y='price',data=df)
plt.xticks(rotation=90)

sns.scatterplot(x='mileage',y='price',data=df)

sns.boxplot(x='engineSize',y='price',data=df)

sns.boxplot(data=df,x='transmission',y='price')

sns.boxplot(data=df,x='fuelType',y='price')

sns.boxplot(data=df,x='model',y='price')
plt.xticks(rotation=90)

X=df.drop(columns=['price'],axis=1)
Y=df['price']

X_one_encode=pd.get_dummies(X,columns=['model','transmission','fuelType'],drop_first=True) #we want to encode columns storing string values

X_one_encode=X_one_encode.astype(int)
X_one_encode

from sklearn.preprocessing import LabelEncoder
columns=['model','transmission','fuelType']
X_label_encoded=X.copy()
label_encoders={}
for i in columns:
  encode=LabelEncoder()
  X_label_encoded[i]=encode.fit_transform(X_label_encoded[i].astype(str))
  label_encoders[i]=encode

X_label_encoded

#Do standard scaling
X_label_encoded.info()

from sklearn.preprocessing import StandardScaler
numeric_columns=['year','mileage','tax','mpg','engineSize']
std=StandardScaler()
X_one_encode[numeric_columns]=std.fit_transform(X_one_encode[numeric_columns])

X_one_encode

X_one_encode[numeric_columns]=std.fit_transform(X_one_encode[numeric_columns])

X_one_encode

from sklearn.preprocessing import StandardScaler

std = StandardScaler()

# scale only numerical features
num_cols = ['model','year', 'mileage', 'tax', 'mpg', 'engineSize']
X_label_encoded[num_cols] = std.fit_transform(X_label_encoded[num_cols])

X_label_encoded

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

X_train, X_test, y_train, y_test = train_test_split(X_one_encode, Y, test_size=0.20, random_state=42)

model=LinearRegression()

model.fit(X_train,y_train)

y_pred=model.predict(X_test)

y_pred #predicted data

r2=r2_score(y_test,y_pred)
r2

n=X_test.shape[0]
p=X_test.shape[1]
adjusted_r2=1-((1-r2)*(n-1))/(n-p-1)
adjusted_r2









